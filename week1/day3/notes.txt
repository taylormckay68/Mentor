- Object and arrays are stored in memory
- object referencing.
var me = {name: "Dan", age: 28}
var you = me;
you.name = 'Bob'
you -> name: 'Bob', age 28
me -> name: 'Bob', age 28


- Arrays also reference: 
var arr = [1, 2, 3];
var arr2 = arr;



- arrays storing in different spots in memmory so, 
arr === arr2 -> false


-iterative methods - a method on an array to which you will pass in another function.  It will run the function for every index in array.

- .map 
    1. called with a function. 
    2. parameters are (currentValue, index, array)
    3. Returns an array of the values returned from the iterative function

var arr = [1, 2, 3, 4];
function iterate(element) {
    console.log(element)
}
arr.map(iterate); -> logs 1, 2, 3, 4

function iterte(element) {
    console.log(element);
    return 4
}

arr.map(iterate) -> [4, 4, 4, 4]

function double(element) {
    return element * 2
}

arr.map(double) -> [2, 4, 6, 8]



- .filter
    1. called with a function. 
    2. parameters are (currentValue, index, array)
    3. Returns an array of the values returned from the iterative function
    Will remove or keep each element of the array depending on whether or not the iterative method returns true(truth) or false(falsy)

var arr = [1, 2, 3, 4];
arr.filter(function(currentValue, i, arr) {
    return true;
}) -> [1, 2, 3, 4]

arr.filter(function(currentValue, i, arr) {
    return false;
}) -> []; all values were true so it returned an empty array

arr.filter(function(currentValue, i, arr) {
    return currentValue > 2;
})

- .reduce
Reduce can do ANYTHING
    1. Called with an iterative function and a starting value
    2. parameters are(value, currentValue, index, array)
        value - the value of the previous return from the iterative function

    
var arr = [1, 2, 3, 4]

arr.reduce(function(prev, current, index, array) {
    console.log(prev)
    console.log(current)
    console.log(index)
    console.log(array)
    return 1
}, 0) -> 0, 1, 0, [1, 2, 3, 4]     1, 2, 1, [1, 2, 3, 4]

arr.reduce(function(prev, current, index, array) {
    return prev + current
}, 0) -> 0 1 3 6

var totalArr = [1, 2, 3, 4, 5, 6, 7, 10, 20, 50]

var totalArr = [1, 2, -3, 4, -5, 6, 7, -10, -20, 50]

var nestedArr = [[1, 2], [3, 4], [5, 6]]

- classes 
    1. Are function that make objects

function fakeDogClass(color, size) {
    return {color: color, size: size}
}

fakeDogClass('brown', 'small') -> {color: 'brown', size: 'small'}

class Dog {
    constructor(stuff) {
        console.log(stuff)
    }
}

new Dog("brown") -> logs 'brown'

class Dog {
    constructor(color, size) {
        this.color = color;
        this.size = size;
    }
}

new Dog('brown', 'big') -> {color: 'brown', size: 'big'}

class Dog {
    constructor(color, size) {
        this.color = color;
        this.size = size;
    }

    bark() {
        console.log('bark')
    }
}

var clifford = new Dog('red', 'big')

clifford.bark; -> 'bark'

var dogs[{size: 'big', color: 'white'}, {size: 'small', color: 'black'}]

dogs.map(function(pup) {
    return new Dog(size, color)
}) -> [{color: 'white', size: 'big'}, {color: 'black', size: 'small'}]
